// Code generated by ent, DO NOT EDIT.

package requirement

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the requirement type in the database.
	Label = "requirement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeImplementations holds the string denoting the implementations edge name in mutations.
	EdgeImplementations = "implementations"
	// Table holds the table name of the requirement in the database.
	Table = "requirements"
	// ImplementationsTable is the table that holds the implementations relation/edge. The primary key declared below.
	ImplementationsTable = "requirement_implementations"
	// ImplementationsInverseTable is the table name for the Implementation entity.
	// It exists in this package in order to avoid circular dependency with the "implementation" package.
	ImplementationsInverseTable = "implementations"
)

// Columns holds all SQL columns for requirement fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldPath,
	FieldDescription,
}

var (
	// ImplementationsPrimaryKey and ImplementationsColumn2 are the table columns denoting the
	// primary key for the implementations relation (M2M).
	ImplementationsPrimaryKey = []string{"requirement_id", "implementation_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Requirement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByImplementationsCount orders the results by implementations count.
func ByImplementationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImplementationsStep(), opts...)
	}
}

// ByImplementations orders the results by implementations terms.
func ByImplementations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImplementationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newImplementationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImplementationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ImplementationsTable, ImplementationsPrimaryKey...),
	)
}
