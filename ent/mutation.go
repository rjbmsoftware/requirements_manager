// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"requirements/ent/implementation"
	"requirements/ent/predicate"
	"requirements/ent/product"
	"requirements/ent/requirement"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeImplementation = "Implementation"
	TypeProduct        = "Product"
	TypeRequirement    = "Requirement"
)

// ImplementationMutation represents an operation that mutates the Implementation nodes in the graph.
type ImplementationMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	url                 *string
	description         *string
	clearedFields       map[string]struct{}
	requirements        map[uuid.UUID]struct{}
	removedrequirements map[uuid.UUID]struct{}
	clearedrequirements bool
	products            *uuid.UUID
	clearedproducts     bool
	done                bool
	oldValue            func(context.Context) (*Implementation, error)
	predicates          []predicate.Implementation
}

var _ ent.Mutation = (*ImplementationMutation)(nil)

// implementationOption allows management of the mutation configuration using functional options.
type implementationOption func(*ImplementationMutation)

// newImplementationMutation creates new mutation for the Implementation entity.
func newImplementationMutation(c config, op Op, opts ...implementationOption) *ImplementationMutation {
	m := &ImplementationMutation{
		config:        c,
		op:            op,
		typ:           TypeImplementation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImplementationID sets the ID field of the mutation.
func withImplementationID(id uuid.UUID) implementationOption {
	return func(m *ImplementationMutation) {
		var (
			err   error
			once  sync.Once
			value *Implementation
		)
		m.oldValue = func(ctx context.Context) (*Implementation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Implementation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImplementation sets the old Implementation of the mutation.
func withImplementation(node *Implementation) implementationOption {
	return func(m *ImplementationMutation) {
		m.oldValue = func(context.Context) (*Implementation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImplementationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImplementationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Implementation entities.
func (m *ImplementationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImplementationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImplementationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Implementation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *ImplementationMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *ImplementationMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Implementation entity.
// If the Implementation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImplementationMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *ImplementationMutation) ResetURL() {
	m.url = nil
}

// SetDescription sets the "description" field.
func (m *ImplementationMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ImplementationMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Implementation entity.
// If the Implementation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImplementationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ImplementationMutation) ResetDescription() {
	m.description = nil
}

// AddRequirementIDs adds the "requirements" edge to the Requirement entity by ids.
func (m *ImplementationMutation) AddRequirementIDs(ids ...uuid.UUID) {
	if m.requirements == nil {
		m.requirements = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.requirements[ids[i]] = struct{}{}
	}
}

// ClearRequirements clears the "requirements" edge to the Requirement entity.
func (m *ImplementationMutation) ClearRequirements() {
	m.clearedrequirements = true
}

// RequirementsCleared reports if the "requirements" edge to the Requirement entity was cleared.
func (m *ImplementationMutation) RequirementsCleared() bool {
	return m.clearedrequirements
}

// RemoveRequirementIDs removes the "requirements" edge to the Requirement entity by IDs.
func (m *ImplementationMutation) RemoveRequirementIDs(ids ...uuid.UUID) {
	if m.removedrequirements == nil {
		m.removedrequirements = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.requirements, ids[i])
		m.removedrequirements[ids[i]] = struct{}{}
	}
}

// RemovedRequirements returns the removed IDs of the "requirements" edge to the Requirement entity.
func (m *ImplementationMutation) RemovedRequirementsIDs() (ids []uuid.UUID) {
	for id := range m.removedrequirements {
		ids = append(ids, id)
	}
	return
}

// RequirementsIDs returns the "requirements" edge IDs in the mutation.
func (m *ImplementationMutation) RequirementsIDs() (ids []uuid.UUID) {
	for id := range m.requirements {
		ids = append(ids, id)
	}
	return
}

// ResetRequirements resets all changes to the "requirements" edge.
func (m *ImplementationMutation) ResetRequirements() {
	m.requirements = nil
	m.clearedrequirements = false
	m.removedrequirements = nil
}

// SetProductsID sets the "products" edge to the Product entity by id.
func (m *ImplementationMutation) SetProductsID(id uuid.UUID) {
	m.products = &id
}

// ClearProducts clears the "products" edge to the Product entity.
func (m *ImplementationMutation) ClearProducts() {
	m.clearedproducts = true
}

// ProductsCleared reports if the "products" edge to the Product entity was cleared.
func (m *ImplementationMutation) ProductsCleared() bool {
	return m.clearedproducts
}

// ProductsID returns the "products" edge ID in the mutation.
func (m *ImplementationMutation) ProductsID() (id uuid.UUID, exists bool) {
	if m.products != nil {
		return *m.products, true
	}
	return
}

// ProductsIDs returns the "products" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductsID instead. It exists only for internal usage by the builders.
func (m *ImplementationMutation) ProductsIDs() (ids []uuid.UUID) {
	if id := m.products; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProducts resets all changes to the "products" edge.
func (m *ImplementationMutation) ResetProducts() {
	m.products = nil
	m.clearedproducts = false
}

// Where appends a list predicates to the ImplementationMutation builder.
func (m *ImplementationMutation) Where(ps ...predicate.Implementation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImplementationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImplementationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Implementation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImplementationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImplementationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Implementation).
func (m *ImplementationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImplementationMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.url != nil {
		fields = append(fields, implementation.FieldURL)
	}
	if m.description != nil {
		fields = append(fields, implementation.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImplementationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case implementation.FieldURL:
		return m.URL()
	case implementation.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImplementationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case implementation.FieldURL:
		return m.OldURL(ctx)
	case implementation.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Implementation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImplementationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case implementation.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case implementation.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Implementation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImplementationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImplementationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImplementationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Implementation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImplementationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImplementationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImplementationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Implementation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImplementationMutation) ResetField(name string) error {
	switch name {
	case implementation.FieldURL:
		m.ResetURL()
		return nil
	case implementation.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Implementation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImplementationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.requirements != nil {
		edges = append(edges, implementation.EdgeRequirements)
	}
	if m.products != nil {
		edges = append(edges, implementation.EdgeProducts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImplementationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case implementation.EdgeRequirements:
		ids := make([]ent.Value, 0, len(m.requirements))
		for id := range m.requirements {
			ids = append(ids, id)
		}
		return ids
	case implementation.EdgeProducts:
		if id := m.products; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImplementationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrequirements != nil {
		edges = append(edges, implementation.EdgeRequirements)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImplementationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case implementation.EdgeRequirements:
		ids := make([]ent.Value, 0, len(m.removedrequirements))
		for id := range m.removedrequirements {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImplementationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrequirements {
		edges = append(edges, implementation.EdgeRequirements)
	}
	if m.clearedproducts {
		edges = append(edges, implementation.EdgeProducts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImplementationMutation) EdgeCleared(name string) bool {
	switch name {
	case implementation.EdgeRequirements:
		return m.clearedrequirements
	case implementation.EdgeProducts:
		return m.clearedproducts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImplementationMutation) ClearEdge(name string) error {
	switch name {
	case implementation.EdgeProducts:
		m.ClearProducts()
		return nil
	}
	return fmt.Errorf("unknown Implementation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImplementationMutation) ResetEdge(name string) error {
	switch name {
	case implementation.EdgeRequirements:
		m.ResetRequirements()
		return nil
	case implementation.EdgeProducts:
		m.ResetProducts()
		return nil
	}
	return fmt.Errorf("unknown Implementation edge %s", name)
}

// ProductMutation represents an operation that mutates the Product nodes in the graph.
type ProductMutation struct {
	config
	op                            Op
	typ                           string
	id                            *uuid.UUID
	description                   *string
	title                         *string
	clearedFields                 map[string]struct{}
	implementationsProduct        map[uuid.UUID]struct{}
	removedimplementationsProduct map[uuid.UUID]struct{}
	clearedimplementationsProduct bool
	done                          bool
	oldValue                      func(context.Context) (*Product, error)
	predicates                    []predicate.Product
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows management of the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for the Product entity.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the ID field of the mutation.
func withProductID(id uuid.UUID) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Product entities.
func (m *ProductMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Product.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDescription sets the "description" field.
func (m *ProductMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProductMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ProductMutation) ResetDescription() {
	m.description = nil
}

// SetTitle sets the "title" field.
func (m *ProductMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ProductMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ProductMutation) ResetTitle() {
	m.title = nil
}

// AddImplementationsProductIDs adds the "implementationsProduct" edge to the Implementation entity by ids.
func (m *ProductMutation) AddImplementationsProductIDs(ids ...uuid.UUID) {
	if m.implementationsProduct == nil {
		m.implementationsProduct = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.implementationsProduct[ids[i]] = struct{}{}
	}
}

// ClearImplementationsProduct clears the "implementationsProduct" edge to the Implementation entity.
func (m *ProductMutation) ClearImplementationsProduct() {
	m.clearedimplementationsProduct = true
}

// ImplementationsProductCleared reports if the "implementationsProduct" edge to the Implementation entity was cleared.
func (m *ProductMutation) ImplementationsProductCleared() bool {
	return m.clearedimplementationsProduct
}

// RemoveImplementationsProductIDs removes the "implementationsProduct" edge to the Implementation entity by IDs.
func (m *ProductMutation) RemoveImplementationsProductIDs(ids ...uuid.UUID) {
	if m.removedimplementationsProduct == nil {
		m.removedimplementationsProduct = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.implementationsProduct, ids[i])
		m.removedimplementationsProduct[ids[i]] = struct{}{}
	}
}

// RemovedImplementationsProduct returns the removed IDs of the "implementationsProduct" edge to the Implementation entity.
func (m *ProductMutation) RemovedImplementationsProductIDs() (ids []uuid.UUID) {
	for id := range m.removedimplementationsProduct {
		ids = append(ids, id)
	}
	return
}

// ImplementationsProductIDs returns the "implementationsProduct" edge IDs in the mutation.
func (m *ProductMutation) ImplementationsProductIDs() (ids []uuid.UUID) {
	for id := range m.implementationsProduct {
		ids = append(ids, id)
	}
	return
}

// ResetImplementationsProduct resets all changes to the "implementationsProduct" edge.
func (m *ProductMutation) ResetImplementationsProduct() {
	m.implementationsProduct = nil
	m.clearedimplementationsProduct = false
	m.removedimplementationsProduct = nil
}

// Where appends a list predicates to the ProductMutation builder.
func (m *ProductMutation) Where(ps ...predicate.Product) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Product, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.description != nil {
		fields = append(fields, product.FieldDescription)
	}
	if m.title != nil {
		fields = append(fields, product.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldDescription:
		return m.Description()
	case product.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldDescription:
		return m.OldDescription(ctx)
	case product.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case product.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldDescription:
		m.ResetDescription()
		return nil
	case product.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.implementationsProduct != nil {
		edges = append(edges, product.EdgeImplementationsProduct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeImplementationsProduct:
		ids := make([]ent.Value, 0, len(m.implementationsProduct))
		for id := range m.implementationsProduct {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedimplementationsProduct != nil {
		edges = append(edges, product.EdgeImplementationsProduct)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeImplementationsProduct:
		ids := make([]ent.Value, 0, len(m.removedimplementationsProduct))
		for id := range m.removedimplementationsProduct {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedimplementationsProduct {
		edges = append(edges, product.EdgeImplementationsProduct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	switch name {
	case product.EdgeImplementationsProduct:
		return m.clearedimplementationsProduct
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	switch name {
	case product.EdgeImplementationsProduct:
		m.ResetImplementationsProduct()
		return nil
	}
	return fmt.Errorf("unknown Product edge %s", name)
}

// RequirementMutation represents an operation that mutates the Requirement nodes in the graph.
type RequirementMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	title                  *string
	_path                  *string
	description            *string
	clearedFields          map[string]struct{}
	implementations        map[uuid.UUID]struct{}
	removedimplementations map[uuid.UUID]struct{}
	clearedimplementations bool
	done                   bool
	oldValue               func(context.Context) (*Requirement, error)
	predicates             []predicate.Requirement
}

var _ ent.Mutation = (*RequirementMutation)(nil)

// requirementOption allows management of the mutation configuration using functional options.
type requirementOption func(*RequirementMutation)

// newRequirementMutation creates new mutation for the Requirement entity.
func newRequirementMutation(c config, op Op, opts ...requirementOption) *RequirementMutation {
	m := &RequirementMutation{
		config:        c,
		op:            op,
		typ:           TypeRequirement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRequirementID sets the ID field of the mutation.
func withRequirementID(id uuid.UUID) requirementOption {
	return func(m *RequirementMutation) {
		var (
			err   error
			once  sync.Once
			value *Requirement
		)
		m.oldValue = func(ctx context.Context) (*Requirement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Requirement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRequirement sets the old Requirement of the mutation.
func withRequirement(node *Requirement) requirementOption {
	return func(m *RequirementMutation) {
		m.oldValue = func(context.Context) (*Requirement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RequirementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RequirementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Requirement entities.
func (m *RequirementMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RequirementMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RequirementMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Requirement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *RequirementMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *RequirementMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Requirement entity.
// If the Requirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequirementMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *RequirementMutation) ResetTitle() {
	m.title = nil
}

// SetPath sets the "path" field.
func (m *RequirementMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *RequirementMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Requirement entity.
// If the Requirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequirementMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *RequirementMutation) ResetPath() {
	m._path = nil
}

// SetDescription sets the "description" field.
func (m *RequirementMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RequirementMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Requirement entity.
// If the Requirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequirementMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *RequirementMutation) ResetDescription() {
	m.description = nil
}

// AddImplementationIDs adds the "implementations" edge to the Implementation entity by ids.
func (m *RequirementMutation) AddImplementationIDs(ids ...uuid.UUID) {
	if m.implementations == nil {
		m.implementations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.implementations[ids[i]] = struct{}{}
	}
}

// ClearImplementations clears the "implementations" edge to the Implementation entity.
func (m *RequirementMutation) ClearImplementations() {
	m.clearedimplementations = true
}

// ImplementationsCleared reports if the "implementations" edge to the Implementation entity was cleared.
func (m *RequirementMutation) ImplementationsCleared() bool {
	return m.clearedimplementations
}

// RemoveImplementationIDs removes the "implementations" edge to the Implementation entity by IDs.
func (m *RequirementMutation) RemoveImplementationIDs(ids ...uuid.UUID) {
	if m.removedimplementations == nil {
		m.removedimplementations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.implementations, ids[i])
		m.removedimplementations[ids[i]] = struct{}{}
	}
}

// RemovedImplementations returns the removed IDs of the "implementations" edge to the Implementation entity.
func (m *RequirementMutation) RemovedImplementationsIDs() (ids []uuid.UUID) {
	for id := range m.removedimplementations {
		ids = append(ids, id)
	}
	return
}

// ImplementationsIDs returns the "implementations" edge IDs in the mutation.
func (m *RequirementMutation) ImplementationsIDs() (ids []uuid.UUID) {
	for id := range m.implementations {
		ids = append(ids, id)
	}
	return
}

// ResetImplementations resets all changes to the "implementations" edge.
func (m *RequirementMutation) ResetImplementations() {
	m.implementations = nil
	m.clearedimplementations = false
	m.removedimplementations = nil
}

// Where appends a list predicates to the RequirementMutation builder.
func (m *RequirementMutation) Where(ps ...predicate.Requirement) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RequirementMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RequirementMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Requirement, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RequirementMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RequirementMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Requirement).
func (m *RequirementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RequirementMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.title != nil {
		fields = append(fields, requirement.FieldTitle)
	}
	if m._path != nil {
		fields = append(fields, requirement.FieldPath)
	}
	if m.description != nil {
		fields = append(fields, requirement.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RequirementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case requirement.FieldTitle:
		return m.Title()
	case requirement.FieldPath:
		return m.Path()
	case requirement.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RequirementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case requirement.FieldTitle:
		return m.OldTitle(ctx)
	case requirement.FieldPath:
		return m.OldPath(ctx)
	case requirement.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Requirement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RequirementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case requirement.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case requirement.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case requirement.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Requirement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RequirementMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RequirementMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RequirementMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Requirement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RequirementMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RequirementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RequirementMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Requirement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RequirementMutation) ResetField(name string) error {
	switch name {
	case requirement.FieldTitle:
		m.ResetTitle()
		return nil
	case requirement.FieldPath:
		m.ResetPath()
		return nil
	case requirement.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Requirement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RequirementMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.implementations != nil {
		edges = append(edges, requirement.EdgeImplementations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RequirementMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case requirement.EdgeImplementations:
		ids := make([]ent.Value, 0, len(m.implementations))
		for id := range m.implementations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RequirementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedimplementations != nil {
		edges = append(edges, requirement.EdgeImplementations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RequirementMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case requirement.EdgeImplementations:
		ids := make([]ent.Value, 0, len(m.removedimplementations))
		for id := range m.removedimplementations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RequirementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedimplementations {
		edges = append(edges, requirement.EdgeImplementations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RequirementMutation) EdgeCleared(name string) bool {
	switch name {
	case requirement.EdgeImplementations:
		return m.clearedimplementations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RequirementMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Requirement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RequirementMutation) ResetEdge(name string) error {
	switch name {
	case requirement.EdgeImplementations:
		m.ResetImplementations()
		return nil
	}
	return fmt.Errorf("unknown Requirement edge %s", name)
}
