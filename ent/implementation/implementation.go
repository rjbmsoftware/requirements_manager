// Code generated by ent, DO NOT EDIT.

package implementation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the implementation type in the database.
	Label = "implementation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeRequirements holds the string denoting the requirements edge name in mutations.
	EdgeRequirements = "requirements"
	// Table holds the table name of the implementation in the database.
	Table = "implementations"
	// RequirementsTable is the table that holds the requirements relation/edge. The primary key declared below.
	RequirementsTable = "requirement_implementations"
	// RequirementsInverseTable is the table name for the Requirement entity.
	// It exists in this package in order to avoid circular dependency with the "requirement" package.
	RequirementsInverseTable = "requirements"
)

// Columns holds all SQL columns for implementation fields.
var Columns = []string{
	FieldID,
	FieldURL,
	FieldDescription,
}

var (
	// RequirementsPrimaryKey and RequirementsColumn2 are the table columns denoting the
	// primary key for the requirements relation (M2M).
	RequirementsPrimaryKey = []string{"requirement_id", "implementation_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Implementation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByRequirementsCount orders the results by requirements count.
func ByRequirementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequirementsStep(), opts...)
	}
}

// ByRequirements orders the results by requirements terms.
func ByRequirements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequirementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRequirementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequirementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RequirementsTable, RequirementsPrimaryKey...),
	)
}
