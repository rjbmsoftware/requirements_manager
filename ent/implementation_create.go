// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"requirements/ent/implementation"
	"requirements/ent/product"
	"requirements/ent/requirement"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ImplementationCreate is the builder for creating a Implementation entity.
type ImplementationCreate struct {
	config
	mutation *ImplementationMutation
	hooks    []Hook
}

// SetURL sets the "url" field.
func (ic *ImplementationCreate) SetURL(s string) *ImplementationCreate {
	ic.mutation.SetURL(s)
	return ic
}

// SetDescription sets the "description" field.
func (ic *ImplementationCreate) SetDescription(s string) *ImplementationCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ic *ImplementationCreate) SetNillableDescription(s *string) *ImplementationCreate {
	if s != nil {
		ic.SetDescription(*s)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *ImplementationCreate) SetID(u uuid.UUID) *ImplementationCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *ImplementationCreate) SetNillableID(u *uuid.UUID) *ImplementationCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// AddRequirementIDs adds the "requirements" edge to the Requirement entity by IDs.
func (ic *ImplementationCreate) AddRequirementIDs(ids ...uuid.UUID) *ImplementationCreate {
	ic.mutation.AddRequirementIDs(ids...)
	return ic
}

// AddRequirements adds the "requirements" edges to the Requirement entity.
func (ic *ImplementationCreate) AddRequirements(r ...*Requirement) *ImplementationCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ic.AddRequirementIDs(ids...)
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (ic *ImplementationCreate) SetProductsID(id uuid.UUID) *ImplementationCreate {
	ic.mutation.SetProductsID(id)
	return ic
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (ic *ImplementationCreate) SetNillableProductsID(id *uuid.UUID) *ImplementationCreate {
	if id != nil {
		ic = ic.SetProductsID(*id)
	}
	return ic
}

// SetProducts sets the "products" edge to the Product entity.
func (ic *ImplementationCreate) SetProducts(p *Product) *ImplementationCreate {
	return ic.SetProductsID(p.ID)
}

// Mutation returns the ImplementationMutation object of the builder.
func (ic *ImplementationCreate) Mutation() *ImplementationMutation {
	return ic.mutation
}

// Save creates the Implementation in the database.
func (ic *ImplementationCreate) Save(ctx context.Context) (*Implementation, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ImplementationCreate) SaveX(ctx context.Context) *Implementation {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ImplementationCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ImplementationCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *ImplementationCreate) defaults() {
	if _, ok := ic.mutation.Description(); !ok {
		v := implementation.DefaultDescription
		ic.mutation.SetDescription(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := implementation.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ImplementationCreate) check() error {
	if _, ok := ic.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Implementation.url"`)}
	}
	if v, ok := ic.mutation.URL(); ok {
		if err := implementation.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Implementation.url": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Implementation.description"`)}
	}
	return nil
}

func (ic *ImplementationCreate) sqlSave(ctx context.Context) (*Implementation, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ImplementationCreate) createSpec() (*Implementation, *sqlgraph.CreateSpec) {
	var (
		_node = &Implementation{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(implementation.Table, sqlgraph.NewFieldSpec(implementation.FieldID, field.TypeUUID))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.URL(); ok {
		_spec.SetField(implementation.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.SetField(implementation.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := ic.mutation.RequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implementation.RequirementsTable,
			Columns: implementation.RequirementsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(requirement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   implementation.ProductsTable,
			Columns: []string{implementation.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_implementations_product = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImplementationCreateBulk is the builder for creating many Implementation entities in bulk.
type ImplementationCreateBulk struct {
	config
	err      error
	builders []*ImplementationCreate
}

// Save creates the Implementation entities in the database.
func (icb *ImplementationCreateBulk) Save(ctx context.Context) ([]*Implementation, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Implementation, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImplementationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ImplementationCreateBulk) SaveX(ctx context.Context) []*Implementation {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ImplementationCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ImplementationCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
